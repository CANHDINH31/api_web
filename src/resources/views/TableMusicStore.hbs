<div class="musicbackground">
    <div class="player">
        <!-- Dashboard -->
        <div class="dashboard">
            <!-- Header -->
            <header>
                <h4>Now playing:</h4>
                <h2>String 57th & 9th</h2>
            </header>

            <!-- CD -->
            <div class="cd">
                <div class="cd-thumb" style="background-image: url('/img/Home/yoona.jpg')">
                </div>
            </div>

            <!-- Control -->
            <div class="control">
                <div class="btn btn-repeat">
                    <i class="fas fa-redo"></i>
                </div>
                <div class="btn btn-prev">
                    <i class="fas fa-step-backward"></i>
                </div>
                <div class="btn btn-toggle-play">
                    <i class="fas fa-pause icon-pause"></i>
                    <i class="fas fa-play icon-play"></i>
                </div>
                <div class="btn btn-next">
                    <i class="fas fa-step-forward"></i>
                </div>
                <div class="btn btn-random">
                    <i class="fas fa-random"></i>
                </div>
            </div>

            <input id="progress" class="progress" type="range" value="0" step="1" min="0" max="100">
            <span style="margin-top: 20px;">Sound: </span>
            <input id="volume" class="volume" type="range" value="50" step="1" min="0" max="100">

            <audio id="audio" src="">
            </audio>
        </div>

        <!-- Playlist -->
        <div class="playlist">

        </div>
    </div>
</div>
<script>
    const $ = document.querySelector.bind(document);
    const $$ = document.querySelector.bind(document);

    const PLAYER_STORAGE_KEY = 'PLAYER';

    const player = $('.player')
    const heading = $('header h2');
    const cdThumb = $('.cd-thumb');
    const audio = $('#audio');
    const cd =$('.cd');
    const playBtn = $('.btn-toggle-play')
    const progress = $('#progress');
    const volume = $('#volume');
    const nextBtn = $('.btn-next');
    const prevBtn = $('.btn-prev')
    const randomBtn = $('.btn-random')
    const repeatBtn = $('.btn-repeat');
    const playlist = $('.playlist')
    
    

    const app = {
        currentIndex : 0,
        isPlaying:false,
        isRanDom:false,
        isRepeat:false,
        songs: {{{ json musics }}},
        render: function() {
            const htmls = this.songs.map((song,index) => {
            return`
                <div class="song ${index === this.currentIndex ? 'active':''}" data-index=${index}>
                    <div class="thumb" style="background-image: url('${song.image}')">
                    </div>
                    <div class="body">
                        <h3 class="title">${song.name}</h3>
                        <p class="author">${song.code}</p>
                    </div>
                    <div class="option">
                        <i class="fas fa-ellipsis-h"></i>
                    </div>
                </div>
            `
        })
        playlist.innerHTML = htmls.join('')

    },
    defineProperties:function(){
        Object.defineProperty(this,'currentSong',{
            get: function(){
                return this.songs[this.currentIndex];
            }
        })
    },
    handleEvents : function(){
        const _this = this;
        const cdWidth = cd.offsetWidth;

        const cdThumbAnimate = cdThumb.animate([
            {transform:'rotate(360deg)'}
        ],{
            duration:10000,
            iterations:Infinity
        })

        cdThumbAnimate.pause();

        document.onscroll = function(){
            const scrollTop = window.scrollY || document.documentElement.scrollTop;
            const newCdWidth = cdWidth - scrollTop;
            cd.style.width = newCdWidth > 0 ? newCdWidth + 'px' : 0;
            cd.style.opacity = newCdWidth /  cdWidth;
        }

        playBtn.onclick = function(){
            if(_this.isPlaying){
                audio.pause(); 
            }else {  
                audio.play();           
            }
            
        }

        audio.onplay = function(){
           this.volume = volume.value / 100;
            _this.isPlaying=true;
            player.classList.add('playing')
            cdThumbAnimate.play();
        }
        audio.onpause = function(){
            _this.isPlaying=false;
            player.classList.remove('playing')
            cdThumbAnimate.pause();

        }
        audio.ontimeupdate = function(){
            if(audio.duration){
                const progressPercent = Math.floor(audio.currentTime / audio.duration * 100);
                progress.value = progressPercent;
            }
        }
        progress.onchange =  function(e){
            const seekTime = audio.duration / 100 * e.target.value;
            audio.currentTime = seekTime;
        }
        volume.onchange = function(e){
               volValue = e.target.value/100;
               audio.volume = volValue;
        }
        nextBtn.onclick = function(){
            if(_this.isRanDom){
                _this.playRanDomSong();
                audio.play();
            }else{
                _this.nextSong();
                
            }
            audio.play();
            _this.render();
            _this.scrollToActiveSong();
            
        }
        prevBtn.onclick = function(){
            if(_this.isRanDom){
                _this.playRanDomSong();
                audio.play();
            }else{
                _this.prevSong();
                
            }
            audio.play();
            _this.render();
        }
        randomBtn.onclick = function(e){
            _this.isRanDom = ! _this.isRanDom;
            randomBtn.classList.toggle('active',_this.randomBtn)
        }
        repeatBtn.onclick = function(e){
             _this.isRepeat = ! _this.isRepeat;
            repeatBtn.classList.toggle('active',_this.repeatBtn)
        }

        audio.onended = function(){
            if(_this.isRepeat){
                audio.play();
            }else{
                nextBtn.click();               
            }
        }

        playlist.onclick = function(e){
            const songNode = e.target.closest('.song:not(.active)');
            if(songNode || !e.target.closest('.option')){
                    if(songNode){
                        _this.currentIndex = Number(songNode.dataset.index);
                        _this.loadCurrentSong();
                        audio.play();
                        _this.render();
                    }
                }   
                
            }
    },
    scrollToActiveSong : function(){
        setTimeout(()=>{
            $('.song.active').scrollIntoView({
                behavior: 'smooth',
                block:'nearest',
            });
        },300)
    },
    loadCurrentSong: function(){
        

        heading.textContent = this.currentSong.name;
        cdThumb.style.backgroundImage = `url('${this.currentSong.image}')`;
        audio.src = this.currentSong.path;
    },
   
    nextSong: function(){
        this.currentIndex++;
        if(this.currentIndex >= this.songs.length){
            this.currentIndex = 0;
        }
        this.loadCurrentSong();
    },
    playRanDomSong: function(){
        let newIndex 
        do {
            newIndex = Math.floor(Math.random()*this.songs.length)
        }while(newIndex === this.currentIndex)

        this.currentIndex = newIndex;
        this.loadCurrentSong();
    },
    prevSong: function(){
        this.currentIndex--;
        if(this.currentIndex < 0){
            this.currentIndex = this.songs.length;
        }
        this.loadCurrentSong();
    },
    start: function() {
        this.defineProperties();
        this.handleEvents();
        this.loadCurrentSong();
        this.render();
        
       


    }
    }
    app.start();
</script>